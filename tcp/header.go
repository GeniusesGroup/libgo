/* For license and copyright information please see the LEGAL file in the code repository */

package tcp

// Header represent a TCP packet, Due performance impact, don't use this type and its methods.
// https://datatracker.ietf.org/doc/html/rfc793#section-3.1
type header struct {
	// Indicate source port number of TCP packet as stream identifier
	SourcePort uint16
	// Indicate destination port of TCP packet as protocol identifier
	DestinationPort uint16

	// Represents the TCP segment’s window index, mark the ordering of a group of messages.
	// When handshaking, this contains the Initial Sequence Number (ISN).
	SequenceNumber uint32

	// Represents the window’s index of the next byte the sender expects to receive.
	// After the handshake, the ACK field must always be populated.
	AckNumber uint32

	// Indicate the length of the header or offset of the data.
	// It encode||decode as 4-bit **words** means 40 bytes encode as 10 words.
	// The minimum size header is 5 words and the maximum is 15 words thus giving
	// the minimum size of 20 bytes and maximum of 60 bytes,
	// allowing for up to 40 bytes of options in the header.
	DataOffset uint8

	Flags flags

	// The Window Size field is used to advertise the window size.
	// In other words, this is the number of bytes the receiver is willing to accept.
	// Since it is a 16-bit field, the maximum window size is 65,535 bytes.
	// Window specifies the number of window size units[c] that the sender of this
	// segment is currently willing to receive.
	Window uint16

	// Used to verify the integrity of the TCP segment. 
	// Generated by the protocol sender as a mathematical technique
	// to help the receiver detect messages that are corrupted or tampered with.
	// If TCP carry by IP, the algorithm is the same as for the Internet Protocol(IP),
	// but the input segment also contains the TCP data and also a pseudo-header from the IP datagram.
	Checksum uint16

	// The Urgent Pointer is used when the U-flag is set. The pointer indicates the position of the urgent data in the stream.
	// It is often set to zero and ignored, but in conjunction with one of the control flags,
	// it can be used as a data offset to mark a subset of a message as requiring priority processing.
	UrgentPointer uint16

	// After the header, several options (0 to 40 bytes) can be provided. An example of these options is:
	// - The Maximum Segment Size (MSS), where the sender informs the other side of the maximum size of the segments.
	// - Special acknowledgment
	// - Window scaling algorithms
	Options []option

	Padding []byte

	// After the possible options, the actual data follows. The data, however, is not required.
	// For example, the handshake is accomplished with only TCP header
	Payload []byte
}

// Each flag in TCP is an individual bit representing On or Off—to manage data flow in specific situations.
// Reserved flags in TCP headers always has a value of zero.
type flags struct {
	// The first 3 bits (rsvd) are not used.
	Reserved1, Reserved2, Reserved3 bool

	// ECN-nonce - concealment protection
	NS bool

	// Congestion window reduced (CWR) flag is set by the sending host
	// to indicate that it received a TCP segment with the ECE flag set and had
	// responded in congestion control mechanism.
	// Used for informing that the sender reduced its sending rate.
	CWR bool

	// ECN-Echo has a dual role, depending on the value of the SYN flag.
	// It indicates:
	// - If the SYN flag is set (1), that the TCP peer is ECN capable.
	// - If the SYN flag is clear (0), that a packet with Congestion Experienced flag
	//   set (ECN=11) in the IP header was received during normal transmission.
	//   This serves as an indication of network congestion (or impending congestion) to the TCP sender.
	ECE bool

	// Urgent Pointer (U) indicates that the segment contains prioritized data.
	URG bool

	// ACK Indicates that the Acknowledgment field is significant.
	// All packets after the initial SYN packet sent by the client should have this flag set.
	ACK bool

	// Push function is used to indicate that the receiver should “push” the data to the service logic as soon as possible.
	PSH bool

	// RST resets the TCP connection.
	RST bool

	// SYN (S) is used to synchronize sequence numbers in the initial handshake.
	// So Only the first packet sent from each end should have this flag set.
	// Some other flags and fields change meaning based on this flag,
	// and some are only valid when it is set, and others when it is clear.
	SYN bool

	// FIN indicates that the sender has finished sending data.
	FIN bool
}

// https://datatracker.ietf.org/doc/html/rfc4413#section-4.3.1
type option struct {
	Kind   optionKind
	Length uint8 // including the header fields
	Data   []byte
}
